<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="Default Project-2023-01-23" climode="true" execEnv="win32_x86" hasViols="true" id="1672914132298" lang="en_GB" machine="Dans-Laptop" prjModule="SimulationImproved" project="" tag="700120 rule set 2022" time="2023-01-23T11:22:10+00:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.1.0" user="DBate">
   <TestConfig machine="Dans-Laptop" name="700120 rule set 2022" pseudoUrl="user://700120 rule set 2022" user="DBate" />
   <Authors>
      <Author id="dev1" name="DBate" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.desktop.files.in.scope" name="Helper Scope Analyzer for C/C++test Professional" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.0.20220527B3558" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.0.20220614B1716" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="27">
      
   </Goals>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="DBate" hash="-1339723791" locRef="1" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Camera.cpp" totLns="14" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Camera.cpp" />
         <Loc auth="DBate" hash="1476908277" locRef="2" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Cube.cpp" totLns="14" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Cube.cpp" />
         <Loc auth="DBate" hash="1741735479" locRef="3" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Cylinder.cpp" totLns="14" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Cylinder.cpp" />
         <Loc auth="DBate" hash="-1823409241" locRef="4" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="D3DFramework.cpp" totLns="696" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/D3DFramework.cpp" />
         <Loc auth="DBate" hash="339766661" locRef="5" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="GraphicalObject.cpp" totLns="8" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/GraphicalObject.cpp" />
         <Loc auth="DBate" hash="1332429808" locRef="6" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Light.cpp" totLns="8" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Light.cpp" />
         <Loc auth="DBate" hash="432555035" locRef="7" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Model.cpp" totLns="60" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Model.cpp" />
         <Loc auth="DBate" hash="1866589198" locRef="8" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Rocket.cpp" totLns="33" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Rocket.cpp" />
         <Loc auth="DBate" hash="-57823737" locRef="9" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Shader.cpp" totLns="10" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Shader.cpp" />
         <Loc auth="DBate" hash="-124510669" locRef="10" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Simulation.cpp" totLns="31" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Simulation.cpp" />
         <Loc auth="DBate" hash="-2091597944" locRef="11" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Sphere.cpp" totLns="14" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Sphere.cpp" />
         <Loc auth="DBate" hash="-861464706" locRef="12" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Texture.cpp" totLns="7" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Texture.cpp" />
         <Loc auth="DBate" hash="949859684" locRef="13" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Model.h" totLns="88" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Model.h" />
         <Loc auth="DBate" hash="-1429473830" locRef="14" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="GraphicalObject.h" totLns="34" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/GraphicalObject.h" />
         <Loc auth="DBate" hash="920938660" locRef="15" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Camera.h" totLns="31" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Camera.h" />
         <Loc auth="DBate" hash="-1326565494" locRef="16" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Sphere.h" totLns="11" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Sphere.h" />
         <Loc auth="DBate" hash="-1852421896" locRef="17" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Shader.h" totLns="62" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Shader.h" />
         <Loc auth="DBate" hash="-1131113513" locRef="18" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Cube.h" totLns="12" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Cube.h" />
         <Loc auth="DBate" hash="1993889855" locRef="19" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="D3DFramework.h" totLns="107" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/D3DFramework.h" />
         <Loc auth="DBate" hash="-1181281170" locRef="20" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Resource.h" totLns="29" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Resource.h" />
         <Loc auth="DBate" hash="-725299517" locRef="21" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Texture.h" totLns="52" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Texture.h" />
         <Loc auth="DBate" hash="380085998" locRef="22" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Light.h" totLns="17" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Light.h" />
         <Loc auth="DBate" hash="-1660791629" locRef="23" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Cylinder.h" totLns="11" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Cylinder.h" />
         <Loc auth="DBate" hash="1766035403" locRef="24" projId="SimulationImproved" projPath="/SimulationImproved" project="SimulationImproved" resProjPath="Rocket.h" totLns="16" uri="file://Dans-Laptop/C:/Users/DBate/Documents/Uni-Programming-Projects/Year%204%20Term%201/ACW/700120-2223-lab-final-DanielJBates/SimulationImproved/Rocket.h" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:15">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="24" checkedLns="1379" id="SimulationImproved" name="SimulationImproved" qfixErrs="0" suppErrs="34" totErrs="27" totFiles="24" totLns="1379" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="Coding Conventions" name="CODSTA" rules="441" total="0">
               <Category authTot="2;" authUrg="2;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="112" total="2">
                  <Category authTot="14;" authUrg="14;" desc="UNKNOWN" name="CODSTA-CPP-06" rules="1" total="14" />
               </Category>
               <Category authTot="0;" authUrg="0;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="68" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="26" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Initialization" name="INIT" rules="20" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 1998" name="MISRA" rules="60" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2004" name="MISRA2004" rules="221" total="0" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C++ 2008" name="MISRA2008" rules="336" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="60" total="0" />
            <Category authTot="4;" authUrg="4;" desc="Object Oriented" name="OOP" rules="61" total="4">
               <Category authTot="0;" authUrg="0;" desc="UNKNOWN" name="OOP-05" rules="1" total="0" />
            </Category>
            <Category authTot="2;" authUrg="2;" desc="Optimization" name="OPT" rules="43" total="2">
               <Category authTot="2;" authUrg="2;" desc="UNKNOWN" name="OPT-13" rules="1" total="2" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Possible Bugs" name="PB" rules="85" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="10" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Portability" name="PORT" rules="39" total="0" />
            <Category authTot="0;" authUrg="0;" desc="Security" name="SECURITY" rules="54" total="0" />
            <Category authTot="0;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="0">
               <Category authTot="3;" authUrg="3;" desc="UNKNOWN" name="STL-37" rules="1" total="3" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="18" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Never convert consts to non-consts" id="CODSTA-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer C++-style casts" id="CODSTA-CPP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="CODSTA-CPP" desc="Declare parameters or local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="14;" cat="CODSTA-CPP-06" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06-DOWNGRADED" origId="CODSTA-CPP-06" sev="5" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="3;" cat="OOP" desc="Check for assignment to self in operator=" id="OOP-34" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="1;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP-05" desc="Do not use multiple inheritance" id="OOP-05-DOWNGRADED" origId="OOP-05" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="2;" cat="OPT-13" desc="Declare member variables in the descending size order" id="OPT-13-DOWNGRADED" origId="OPT-13" sev="5" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="3;" cat="STL-37" desc="C-style arrays shall not be used" id="STL-37-DOWNGRADED" origId="STL-37" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="4;" authUrg="4;" id="3" total="4" />
            <Severity authTot="6;" authUrg="6;" id="4" total="6" />
            <Severity authTot="17;" authUrg="17;" id="5" total="17" />
         </SeverityList>
      </Rules>
      
  <Supps>
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="1" suppLine="193" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="2" suppLine="199" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="3" suppLine="210" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="4" suppLine="214" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="5" suppLine="223" type="in-file" suppMsg="Declare parameter 'szFileName' as const" suppRule="CODSTA-CPP-53" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="6" suppLine="223" type="in-file" suppMsg="Declare parameter 'szEntryPoint' as const" suppRule="CODSTA-CPP-53" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="7" suppLine="223" type="in-file" suppMsg="Declare parameter 'szShaderModel' as const" suppRule="CODSTA-CPP-53" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="8" suppLine="223" type="in-file" suppMsg="Declare parameter 'ppBlobOut' as const" suppRule="CODSTA-CPP-53" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="9" suppLine="245" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="10" suppLine="254" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="11" suppLine="266" type="in-file" suppMsg="The 'driverTypes' array should not be used" suppRule="STL-37-DOWNGRADED" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="12" suppLine="273" type="in-file" suppMsg="The 'featureLevels' array should not be used" suppRule="STL-37-DOWNGRADED" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="13" suppLine="285" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="14" suppLine="318" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="15" suppLine="393" type="in-file" suppMsg="The 'layout' array should not be used" suppRule="STL-37-DOWNGRADED" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="4" suppRsn="DirectX Reqiured" refId="16" suppLine="592" type="in-file" suppMsg="C-style cast is used" suppRule="CODSTA-CPP-11" suppLoc="/SimulationImproved/D3DFramework.cpp" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="17" suppLine="6" type="in-file" suppMsg="Define constant 'IDS_APP_TITLE' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="18" suppLine="8" type="in-file" suppMsg="Define constant 'IDR_MAINFRAME' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="19" suppLine="9" type="in-file" suppMsg="Define constant 'IDD_SIMULATION_DIALOG' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="20" suppLine="10" type="in-file" suppMsg="Define constant 'IDD_ABOUTBOX' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="21" suppLine="11" type="in-file" suppMsg="Define constant 'IDM_ABOUT' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="22" suppLine="12" type="in-file" suppMsg="Define constant 'IDM_EXIT' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="23" suppLine="13" type="in-file" suppMsg="Define constant 'IDI_SIMULATION' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="24" suppLine="14" type="in-file" suppMsg="Define constant 'IDI_SMALL' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="25" suppLine="15" type="in-file" suppMsg="Define constant 'IDC_SIMULATION' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="26" suppLine="16" type="in-file" suppMsg="Define constant 'IDC_MYICON' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="27" suppLine="17" type="in-file" suppMsg="Define constant 'IDC_STATIC' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="28" suppLine="20" type="in-file" suppMsg="Whole code in file should be secured from multiple inclusion" suppRule="PFO-08" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="29" suppLine="23" type="in-file" suppMsg="Define constant '_APS_NO_MFC' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="30" suppLine="24" type="in-file" suppMsg="Define constant '_APS_NEXT_RESOURCE_VALUE' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="31" suppLine="25" type="in-file" suppMsg="Define constant '_APS_NEXT_COMMAND_VALUE' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="32" suppLine="26" type="in-file" suppMsg="Define constant '_APS_NEXT_CONTROL_VALUE' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
    <Supp suppAuth="DBate" locRef="20" suppRsn="DirectX Reqiured" refId="33" suppLine="27" type="in-file" suppMsg="Define constant '_APS_NEXT_SYMED_VALUE' using 'const' or 'enum' instead of '#define'" suppRule="CODSTA-03" suppLoc="/SimulationImproved/Resource.h" />
  </Supps>

      
  <StdViols>
    <StdViol msg="C-style cast is used" ln="193" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="1" locStartln="193" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="-197628118" rule.header="Prefer C++-style casts" tool="c++test" lineHash="-197628118" unbViolId="504d0efc-43aa-3bb5-803f-7a592344b6da" locStartPos="38" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76264460-21b8-324e-8d0c-4fe73c3d68b7" locEndPos="39" locType="sr" hash="-1823409241" locEndLn="193" goals="0," />
    <StdViol msg="C-style cast is used" ln="193" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="1" locStartln="193" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="-197628118" rule.header="Prefer C++-style casts" tool="c++test" lineHash="-197628118" unbViolId="7d958002-8ee9-3a99-bf09-ecea42be9975" locStartPos="46" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58d09c25-5966-3324-abee-33bbecedd530" locEndPos="47" locType="sr" hash="-1823409241" locEndLn="193" goals="0," />
    <StdViol msg="C-style cast is used" ln="199" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="2" locStartln="199" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="-1330208109" rule.header="Prefer C++-style casts" tool="c++test" lineHash="-1330208109" unbViolId="882839e0-4511-3b89-8f20-7d10a380b40c" locStartPos="10" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad1b3e44-37ce-3d0d-9bd4-38e72d3219cd" locEndPos="11" locType="sr" hash="-1823409241" locEndLn="199" goals="0," />
    <StdViol msg="C-style cast is used" ln="210" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="3" locStartln="210" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="-1330208109" rule.header="Prefer C++-style casts" tool="c++test" lineHash="-1330208109" unbViolId="b009cdeb-50e5-3275-969f-533d6f0efbef" locStartPos="10" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad457bbe-731e-371c-a104-443b9772169f" locEndPos="11" locType="sr" hash="-1823409241" locEndLn="210" goals="0," />
    <StdViol msg="C-style cast is used" ln="214" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="4" locStartln="214" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="990635916" rule.header="Prefer C++-style casts" tool="c++test" lineHash="990635916" unbViolId="32893246-8f65-304f-93fb-af63484b1211" locStartPos="9" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46ab0532-f83c-306f-ae55-92bb04b8483f" locEndPos="10" locType="sr" hash="-1823409241" locEndLn="214" goals="0," />
    <StdViol msg="Declare parameter 'szFileName' as const" ln="223" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="5" locStartln="223" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-53" lnHash="323619647" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="323619647" unbViolId="4b96f67a-655a-3739-9580-52fd78c0f6c0" locStartPos="57" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e0ef969-7eaf-36ba-9fe1-df944daed81b" locEndPos="58" locType="sr" hash="-1823409241" locEndLn="223" goals="0," />
    <StdViol msg="Declare parameter 'szEntryPoint' as const" ln="223" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="6" locStartln="223" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-53" lnHash="323619647" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="323619647" unbViolId="7158ceda-b6af-30f8-b49b-b1f36e188980" locStartPos="76" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fa71ccd-ed34-36aa-9892-1c42da3eda7c" locEndPos="77" locType="sr" hash="-1823409241" locEndLn="223" goals="0," />
    <StdViol msg="Declare parameter 'szShaderModel' as const" ln="223" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="7" locStartln="223" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-53" lnHash="323619647" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="323619647" unbViolId="113180be-6cee-3eaa-8c7b-d4faaebcbeb0" locStartPos="97" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bce7d09-d5ab-39b2-b337-9364e89b50cf" locEndPos="98" locType="sr" hash="-1823409241" locEndLn="223" goals="0," />
    <StdViol msg="Declare parameter 'ppBlobOut' as const" ln="223" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="8" locStartln="223" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-53" lnHash="323619647" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="323619647" unbViolId="1e3a4f06-c20e-301b-a710-bb2937601b6c" locStartPos="123" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07a53884-dec3-3007-99c4-b4a57915a11d" locEndPos="124" locType="sr" hash="-1823409241" locEndLn="223" goals="0," />
    <StdViol msg="C-style cast is used" ln="245" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="9" locStartln="245" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="990635916" rule.header="Prefer C++-style casts" tool="c++test" lineHash="990635916" unbViolId="c984fb0a-9053-3e24-8b4d-290afdcf2118" locStartPos="9" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="723e4965-f6d5-3b0e-bbe3-086c26d9489c" locEndPos="10" locType="sr" hash="-1823409241" locEndLn="245" goals="0," />
    <StdViol msg="C-style cast is used" ln="254" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="10" locStartln="254" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="1363633442" rule.header="Prefer C++-style casts" tool="c++test" lineHash="1363633442" unbViolId="d579bc0f-c670-38b1-bb15-6b596280c02e" locStartPos="12" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8eba6801-019e-3497-b799-7181e6abab88" locEndPos="13" locType="sr" hash="-1823409241" locEndLn="254" goals="0," />
    <StdViol msg="The 'driverTypes' array should not be used" ln="266" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="11" locStartln="266" sev="4" auth="DBate" locRef="4" rule="STL-37-DOWNGRADED" lnHash="1672939177" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="1672939177" unbViolId="34888ed7-1095-39d0-9556-82eedbd12153" locStartPos="17" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc236a00-ca4f-3511-b81a-971e4ba58749" locEndPos="18" locType="sr" hash="-1823409241" locEndLn="266" goals="0," />
    <StdViol msg="The 'featureLevels' array should not be used" ln="273" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="12" locStartln="273" sev="4" auth="DBate" locRef="4" rule="STL-37-DOWNGRADED" lnHash="-677401977" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-677401977" unbViolId="bde79a2f-39f9-335a-932f-d97fa891ec2a" locStartPos="19" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02e5fc51-f7e6-3919-aa6b-53ff4ec78179" locEndPos="20" locType="sr" hash="-1823409241" locEndLn="273" goals="0," />
    <StdViol msg="C-style cast is used" ln="285" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="13" locStartln="285" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="1237143233" rule.header="Prefer C++-style casts" tool="c++test" lineHash="1237143233" unbViolId="47c7bed5-e30c-37b1-bf66-76bb75881541" locStartPos="13" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1808c3a-d575-39d3-b7ee-b5176e4490e5" locEndPos="14" locType="sr" hash="-1823409241" locEndLn="285" goals="0," />
    <StdViol msg="C-style cast is used" ln="318" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="14" locStartln="318" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="-1897702698" rule.header="Prefer C++-style casts" tool="c++test" lineHash="-1897702698" unbViolId="b0f36fd7-7fd9-3334-9c75-ebfcc488a950" locStartPos="2" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acd35346-fbd3-3020-90e2-4989ffb1384f" locEndPos="3" locType="sr" hash="-1823409241" locEndLn="318" goals="0," />
    <StdViol msg="The 'layout' array should not be used" ln="393" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="15" locStartln="393" sev="4" auth="DBate" locRef="4" rule="STL-37-DOWNGRADED" lnHash="216007016" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="216007016" unbViolId="50d89f49-b116-3344-958b-a869a09a3094" locStartPos="26" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e20672b2-f034-3615-8bb2-7c0c54813dfc" locEndPos="27" locType="sr" hash="-1823409241" locEndLn="393" goals="0," />
    <StdViol msg="C-style cast is used" ln="592" locFile="/SimulationImproved/D3DFramework.cpp" suppRef="16" locStartln="592" sev="3" auth="DBate" locRef="4" rule="CODSTA-CPP-11" lnHash="990635916" rule.header="Prefer C++-style casts" tool="c++test" lineHash="990635916" unbViolId="d6e74917-794e-3ccb-addb-0bb57e0c5531" locStartPos="9" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0f3d06d-2326-3598-8c57-8996ee5d7982" locEndPos="10" locType="sr" hash="-1823409241" locEndLn="592" goals="0," />
    <StdViol msg="Declare local variable 'vx' as const" ln="18" locFile="/SimulationImproved/Rocket.cpp" locStartln="18" sev="3" auth="DBate" locRef="8" rule="CODSTA-CPP-53" lnHash="-822260377" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-822260377" unbViolId="38cb8cf5-6263-3233-92eb-cebad7443ed5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9a08be0-6c75-36f4-947c-bd0aa4327dc0" locEndPos="8" locType="sr" urgent="true" hash="1866589198" locEndLn="18" goals="1," />
    <StdViol msg="Declare local variable 'z' as const" ln="23" locFile="/SimulationImproved/Rocket.cpp" locStartln="23" sev="3" auth="DBate" locRef="8" rule="CODSTA-CPP-53" lnHash="1757433426" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1757433426" unbViolId="e9bf3707-299e-3b11-88a9-8ef2df50a35f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f4905ea-72ed-3b32-b8b9-784873306fe8" locEndPos="8" locType="sr" urgent="true" hash="1866589198" locEndLn="23" goals="1," />
    <StdViol msg="&quot;a @= b&quot; form of expression should be used in function 'update'" ln="25" locFile="/SimulationImproved/Rocket.cpp" locStartln="25" sev="3" auth="DBate" locRef="8" rule="OPT-07" lnHash="1196476865" rule.header="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" tool="c++test" lineHash="1196476865" unbViolId="e3db9b89-8223-39cf-8745-3e6360c74a87" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caf3ec61-be82-36f0-a202-63650d043f53" locEndPos="2" locType="sr" urgent="true" hash="1866589198" locEndLn="25" goals="1," />
    <StdViol msg="&quot;a @= b&quot; form of expression should be used in function 'update'" ln="28" locFile="/SimulationImproved/Rocket.cpp" locStartln="28" sev="3" auth="DBate" locRef="8" rule="OPT-07" lnHash="188146602" rule.header="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" tool="c++test" lineHash="188146602" unbViolId="bbdab7ad-f87e-3f3e-b2f6-bbef46a0c278" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ad2d9d3-3d6c-3d70-b810-b6fc49b080be" locEndPos="2" locType="sr" urgent="true" hash="1866589198" locEndLn="28" goals="1," />
    <StdViol msg="The 'mLightPosition' array should not be used" ln="13" locFile="/SimulationImproved/Model.h" locStartln="13" sev="4" auth="DBate" locRef="13" rule="STL-37-DOWNGRADED" lnHash="198685385" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="198685385" unbViolId="14084194-8f99-3839-ad68-ffc1c2632e9c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a860e1b6-7f6a-32ec-92fd-0d98e76ed17c" locEndPos="20" locType="sr" urgent="true" hash="949859684" locEndLn="13" goals="1," />
    <StdViol msg="The 'mLightColour' array should not be used" ln="14" locFile="/SimulationImproved/Model.h" locStartln="14" sev="4" auth="DBate" locRef="13" rule="STL-37-DOWNGRADED" lnHash="2018188460" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="2018188460" unbViolId="33f6efd0-e75a-3248-b6e4-1501ff0e078e" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2e3fefb-b8d9-3dc2-bd63-846db7ada6a9" locEndPos="20" locType="sr" urgent="true" hash="949859684" locEndLn="14" goals="1," />
    <StdViol msg="Check for assignment to self in operator= in class 'Model'" ln="49" locFile="/SimulationImproved/Model.h" locStartln="49" sev="4" auth="DBate" locRef="13" rule="OOP-34" lnHash="-2055534351" rule.header="Check for assignment to self in operator=" tool="c++test" lineHash="-2055534351" unbViolId="9193c30a-9f22-327d-93a8-ddb89a5e839a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05f3bdf1-8e6a-344b-bbef-c8f51eb75cbd" locEndPos="17" locType="sr" urgent="true" hash="949859684" locEndLn="49" goals="1," />
    <StdViol msg="Member function 'getCB' returns handles to member data: '_mCB'" ln="58" locFile="/SimulationImproved/Model.h" locStartln="58" sev="5" auth="DBate" locRef="13" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="747063102" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="747063102" unbViolId="45b3d2b2-458c-35df-b038-3396efdf992b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb062b4a-5668-3072-b622-57458caeba18" locEndPos="3" locType="sr" urgent="true" hash="949859684" locEndLn="58" goals="1," />
    <StdViol msg="Member function 'getTexture' returns handles to member data: '_mTexture'" ln="63" locFile="/SimulationImproved/Model.h" locStartln="63" sev="5" auth="DBate" locRef="13" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-1311190946" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1311190946" unbViolId="82688622-665c-3640-85a7-1157ef8c4e59" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ed5f25f-0b4b-3fd7-8a8a-2bf668cdd94c" locEndPos="3" locType="sr" urgent="true" hash="949859684" locEndLn="63" goals="1," />
    <StdViol msg="Member function 'getInitalPosition' returns handles to member data: '_mInitialPosition'" ln="21" locFile="/SimulationImproved/GraphicalObject.h" locStartln="21" sev="5" auth="DBate" locRef="14" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-1064794836" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1064794836" unbViolId="e1d88295-c5df-32cb-a008-7a9e8c99b3c8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74e2cc24-1363-3215-9d62-fe3704faefce" locEndPos="3" locType="sr" urgent="true" hash="-1429473830" locEndLn="21" goals="1," />
    <StdViol msg="Member function 'getCurrentPosition' returns handles to member data: '_mCurrentPosition'" ln="29" locFile="/SimulationImproved/GraphicalObject.h" locStartln="29" sev="5" auth="DBate" locRef="14" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="319113879" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="319113879" unbViolId="f3b8060a-a4c3-3bc1-af1f-2525905ccb62" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1b62e21-b2db-39cd-adde-eaf952b9675b" locEndPos="3" locType="sr" urgent="true" hash="-1429473830" locEndLn="29" goals="1," />
    <StdViol msg="Member function 'getEye' returns handles to member data: '_mEye'" ln="26" locFile="/SimulationImproved/Camera.h" locStartln="26" sev="5" auth="DBate" locRef="15" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-1740162630" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1740162630" unbViolId="920f6b14-9fb9-36b9-8afd-cd24186f2a55" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="828530b9-10e6-361f-9fa2-19dc569cb703" locEndPos="44" locType="sr" urgent="true" hash="920938660" locEndLn="26" goals="1," />
    <StdViol msg="Member function 'getView' returns handles to member data: '_mView'" ln="28" locFile="/SimulationImproved/Camera.h" locStartln="28" sev="5" auth="DBate" locRef="15" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-1662685324" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1662685324" unbViolId="97def17f-ab96-3ef5-a7d8-773813ee0a65" locStartPos="44" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2acc9c1-01e1-3588-b653-794fca59e257" locEndPos="45" locType="sr" urgent="true" hash="920938660" locEndLn="28" goals="1," />
    <StdViol msg="Member function 'getProjection' returns handles to member data: '_mProjection'" ln="29" locFile="/SimulationImproved/Camera.h" locStartln="29" sev="5" auth="DBate" locRef="15" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-433726944" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-433726944" unbViolId="45234f9d-39a3-34a7-b1be-83349e6d9034" locStartPos="50" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="603fcd8f-d9b2-3154-bf55-4bcf52a6c0d1" locEndPos="51" locType="sr" urgent="true" hash="920938660" locEndLn="29" goals="1," />
    <StdViol msg="Check for assignment to self in operator= in class 'Shader'" ln="34" locFile="/SimulationImproved/Shader.h" locStartln="34" sev="4" auth="DBate" locRef="17" rule="OOP-34" lnHash="-1516117401" rule.header="Check for assignment to self in operator=" tool="c++test" lineHash="-1516117401" unbViolId="78083fac-25e1-3b89-b4a7-c39c4656d998" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a35848e-bbcb-3a4a-95cc-5db6a29d7be7" locEndPos="18" locType="sr" urgent="true" hash="-1852421896" locEndLn="34" goals="1," />
    <StdViol msg="Member function 'getVSBlob' returns handles to member data: '_mVSBlob'" ln="44" locFile="/SimulationImproved/Shader.h" locStartln="44" sev="5" auth="DBate" locRef="17" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-2019317245" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-2019317245" unbViolId="ad1599eb-7959-3ffe-82f5-2e81b7bf7e54" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c28addc-0dfc-3e3e-9ddc-b89b53d0b3fb" locEndPos="3" locType="sr" urgent="true" hash="-1852421896" locEndLn="44" goals="1," />
    <StdViol msg="Member function 'getPSBlob' returns handles to member data: '_mPSBlob'" ln="49" locFile="/SimulationImproved/Shader.h" locStartln="49" sev="5" auth="DBate" locRef="17" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="1245595261" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="1245595261" unbViolId="037adcf5-6209-3e11-beca-175f8a51cd15" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdc6908d-9747-3610-82ba-4bd050c77597" locEndPos="3" locType="sr" urgent="true" hash="-1852421896" locEndLn="49" goals="1," />
    <StdViol msg="Member function 'getVertexShader' returns handles to member data: '_mVertexShader'" ln="54" locFile="/SimulationImproved/Shader.h" locStartln="54" sev="5" auth="DBate" locRef="17" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="1784316820" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="1784316820" unbViolId="a56361c5-e51a-3743-969c-54a0d39bfdf2" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d402757e-4319-3204-8793-088aa38f5dc8" locEndPos="3" locType="sr" urgent="true" hash="-1852421896" locEndLn="54" goals="1," />
    <StdViol msg="Member function 'getPixelShader' returns handles to member data: '_mPixelShader'" ln="59" locFile="/SimulationImproved/Shader.h" locStartln="59" sev="5" auth="DBate" locRef="17" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-75470226" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-75470226" unbViolId="7ef4e9c2-2ee2-31b3-bfd1-2c6f218c69de" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b7e47be-b162-3eca-80e1-8540eef9f9a8" locEndPos="3" locType="sr" urgent="true" hash="-1852421896" locEndLn="59" goals="1," />
    <StdViol msg="Members '_pCamera, _pConstantBuffer, _pDepthStencil, _pDepthStencilView, _pImmediateContext, _pImmediateContext1, _pIndexBuffer, _pLauncher, _pLavaRock, _pLights, _pPixelShader, _pRenderTargetView, _pRocket, _pRocketMetal, _pRocks, _pRustedMetal, _pTerrain, _pVertexBuffer, _pVertexLayout, _pVertexShader, _pd3dDevice, _pd3dDevice1, _swapChain, _swapChain1' of class 'D3DFramework' are declared in suboptimal order for memory layout" ln="49" locFile="/SimulationImproved/D3DFramework.h" locStartln="49" sev="5" auth="DBate" locRef="19" rule="OPT-13-DOWNGRADED" lnHash="-2077504350" rule.header="Declare member variables in the descending size order" tool="c++test" lineHash="-2077504350" unbViolId="0b9b0f09-74b5-3f50-845e-5d9f46759b38" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bf559d4-12bc-3c08-9e59-eac03ecf5f00" locEndPos="7" locType="sr" urgent="true" hash="1993889855" locEndLn="49" goals="1," />
    <StdViol msg="The '_pLights' array should not be used" ln="84" locFile="/SimulationImproved/D3DFramework.h" locStartln="84" sev="4" auth="DBate" locRef="19" rule="STL-37-DOWNGRADED" lnHash="502370041" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="502370041" unbViolId="17831566-5652-3fac-bd19-5cd9306ab935" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="156509da-a7a6-3101-bcaf-b87579e130b8" locEndPos="25" locType="sr" urgent="true" hash="1993889855" locEndLn="84" goals="1," />
    <StdViol msg="Define constant 'IDS_APP_TITLE' using 'const' or 'enum' instead of '#define'" ln="6" locFile="/SimulationImproved/Resource.h" suppRef="17" locStartln="6" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-877591387" rule.header="Do not define constants via #define" tool="c++test" lineHash="-877591387" unbViolId="b3dc3522-fa46-3acb-98b2-6ad09eb13694" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ac7bab7-974a-3a73-a11f-275402c65fec" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="6" goals="0," />
    <StdViol msg="Define constant 'IDR_MAINFRAME' using 'const' or 'enum' instead of '#define'" ln="8" locFile="/SimulationImproved/Resource.h" suppRef="18" locStartln="8" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-1261042911" rule.header="Do not define constants via #define" tool="c++test" lineHash="-1261042911" unbViolId="b1dc8a25-cfbc-377c-9916-16c9228c3c60" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66e88df3-02df-3bb1-a853-65657291ac1d" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="8" goals="0," />
    <StdViol msg="Define constant 'IDD_SIMULATION_DIALOG' using 'const' or 'enum' instead of '#define'" ln="9" locFile="/SimulationImproved/Resource.h" suppRef="19" locStartln="9" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="15204123" rule.header="Do not define constants via #define" tool="c++test" lineHash="15204123" unbViolId="c3f28d25-87b7-3036-980f-f24a6ef8cb9b" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f367f336-5b63-35ae-a8f8-92b2be709d4d" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="9" goals="0," />
    <StdViol msg="Define constant 'IDD_ABOUTBOX' using 'const' or 'enum' instead of '#define'" ln="10" locFile="/SimulationImproved/Resource.h" suppRef="20" locStartln="10" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="997359070" rule.header="Do not define constants via #define" tool="c++test" lineHash="997359070" unbViolId="db2f3927-9d2f-3bce-9a0d-6b096051e508" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abc611b8-24c1-3855-8d06-19c62175e6da" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="10" goals="0," />
    <StdViol msg="Define constant 'IDM_ABOUT' using 'const' or 'enum' instead of '#define'" ln="11" locFile="/SimulationImproved/Resource.h" suppRef="21" locStartln="11" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-1632837677" rule.header="Do not define constants via #define" tool="c++test" lineHash="-1632837677" unbViolId="5ac9abf7-0b23-34eb-b5d2-ceff11f325d1" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff8fa886-fe77-355e-aeb9-67153cc494b3" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="11" goals="0," />
    <StdViol msg="Define constant 'IDM_EXIT' using 'const' or 'enum' instead of '#define'" ln="12" locFile="/SimulationImproved/Resource.h" suppRef="22" locStartln="12" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="1562237929" rule.header="Do not define constants via #define" tool="c++test" lineHash="1562237929" unbViolId="2c33a1e0-f03d-3f15-9716-317defe1396d" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3909f6ae-bedc-3a1f-8a80-8bc59ac9a5f1" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="12" goals="0," />
    <StdViol msg="Define constant 'IDI_SIMULATION' using 'const' or 'enum' instead of '#define'" ln="13" locFile="/SimulationImproved/Resource.h" suppRef="23" locStartln="13" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-350537719" rule.header="Do not define constants via #define" tool="c++test" lineHash="-350537719" unbViolId="4f14afd6-03b6-32d7-8824-a8df940d2dfd" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c059374-fa3b-3d8b-8415-1159ad3eba8e" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="13" goals="0," />
    <StdViol msg="Define constant 'IDI_SMALL' using 'const' or 'enum' instead of '#define'" ln="14" locFile="/SimulationImproved/Resource.h" suppRef="24" locStartln="14" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="1254519501" rule.header="Do not define constants via #define" tool="c++test" lineHash="1254519501" unbViolId="79ce238e-aa1f-3628-aa59-1a0d06fc333f" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef5394da-9e43-3321-a679-f7ed98a681e7" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="14" goals="0," />
    <StdViol msg="Define constant 'IDC_SIMULATION' using 'const' or 'enum' instead of '#define'" ln="15" locFile="/SimulationImproved/Resource.h" suppRef="25" locStartln="15" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-1036498662" rule.header="Do not define constants via #define" tool="c++test" lineHash="-1036498662" unbViolId="8682b222-d6f1-3407-9688-c0f6b54faac4" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d447df3a-ff0e-3c11-835b-571de711c1b5" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="15" goals="0," />
    <StdViol msg="Define constant 'IDC_MYICON' using 'const' or 'enum' instead of '#define'" ln="16" locFile="/SimulationImproved/Resource.h" suppRef="26" locStartln="16" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-305061644" rule.header="Do not define constants via #define" tool="c++test" lineHash="-305061644" unbViolId="56e3d35a-611f-3bb9-a47d-d20bfb2b4568" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9adcc33-d8a6-3248-9c99-16e24353ea51" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="16" goals="0," />
    <StdViol msg="Define constant 'IDC_STATIC' using 'const' or 'enum' instead of '#define'" ln="17" locFile="/SimulationImproved/Resource.h" suppRef="27" locStartln="17" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="218269035" rule.header="Do not define constants via #define" tool="c++test" lineHash="218269035" unbViolId="8e92d14f-d3fc-39b2-b798-044ea07ccf8b" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83caa04d-fd46-31b9-875b-6a3ee015fcb0" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="17" goals="0," />
    <StdViol msg="Whole code in file should be secured from multiple inclusion" ln="20" locFile="/SimulationImproved/Resource.h" suppRef="28" locStartln="20" sev="3" auth="DBate" locRef="20" rule="PFO-08" lnHash="-421730675" rule.header="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" tool="c++test" lineHash="-421730675" unbViolId="876a6d16-c08d-3105-b649-ffe32ba89f4c" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cd807b4-63ed-3dff-81e8-b362a9b2ba0a" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="20" goals="0," />
    <StdViol msg="Define constant '_APS_NO_MFC' using 'const' or 'enum' instead of '#define'" ln="23" locFile="/SimulationImproved/Resource.h" suppRef="29" locStartln="23" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="1718011186" rule.header="Do not define constants via #define" tool="c++test" lineHash="1718011186" unbViolId="302d57ee-52f9-30e4-938d-591104eceecb" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09faa4b5-c4e2-3dbc-beda-1ae309bfabd4" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="23" goals="0," />
    <StdViol msg="Define constant '_APS_NEXT_RESOURCE_VALUE' using 'const' or 'enum' instead of '#define'" ln="24" locFile="/SimulationImproved/Resource.h" suppRef="30" locStartln="24" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-1355413820" rule.header="Do not define constants via #define" tool="c++test" lineHash="-1355413820" unbViolId="a60d4c42-97ff-3e7b-b73b-f3d5ff0fc2ba" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7561cd5c-bd83-35ad-9992-43274642f36e" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="24" goals="0," />
    <StdViol msg="Define constant '_APS_NEXT_COMMAND_VALUE' using 'const' or 'enum' instead of '#define'" ln="25" locFile="/SimulationImproved/Resource.h" suppRef="31" locStartln="25" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="-715784997" rule.header="Do not define constants via #define" tool="c++test" lineHash="-715784997" unbViolId="2340d91a-b996-3966-bf7b-2cc015e1dd67" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="203d894c-7da0-3dc8-b1fc-6a8059fa726f" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="25" goals="0," />
    <StdViol msg="Define constant '_APS_NEXT_CONTROL_VALUE' using 'const' or 'enum' instead of '#define'" ln="26" locFile="/SimulationImproved/Resource.h" suppRef="32" locStartln="26" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="2100635812" rule.header="Do not define constants via #define" tool="c++test" lineHash="2100635812" unbViolId="14e69940-e5f9-36d9-9790-ef1f1d4abb89" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="608db639-d433-3378-aef2-94c83796e55e" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="26" goals="0," />
    <StdViol msg="Define constant '_APS_NEXT_SYMED_VALUE' using 'const' or 'enum' instead of '#define'" ln="27" locFile="/SimulationImproved/Resource.h" suppRef="33" locStartln="27" sev="3" auth="DBate" locRef="20" rule="CODSTA-03" lnHash="2005311412" rule.header="Do not define constants via #define" tool="c++test" lineHash="2005311412" unbViolId="21771631-3dfc-30f2-b760-fbf0ac4581f4" locStartPos="0" supp="true" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e084fe4-ac61-3c5b-a1c1-ce453a11c836" locEndPos="1" locType="sr" hash="-1181281170" locEndLn="27" goals="0," />
    <StdViol msg="Members '_mTextureSRV, _mTextureSampler' of class 'Texture' are declared in suboptimal order for memory layout" ln="6" locFile="/SimulationImproved/Texture.h" locStartln="6" sev="5" auth="DBate" locRef="21" rule="OPT-13-DOWNGRADED" lnHash="-570931863" rule.header="Declare member variables in the descending size order" tool="c++test" lineHash="-570931863" unbViolId="8a3dfcdf-f7ca-356f-832b-f36acbfaa2c1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeca61a8-0931-3307-b1ac-a0d9e94479a1" locEndPos="7" locType="sr" urgent="true" hash="-725299517" locEndLn="6" goals="1," />
    <StdViol msg="Check for assignment to self in operator= in class 'Texture'" ln="34" locFile="/SimulationImproved/Texture.h" locStartln="34" sev="4" auth="DBate" locRef="21" rule="OOP-34" lnHash="1549778881" rule.header="Check for assignment to self in operator=" tool="c++test" lineHash="1549778881" unbViolId="8fccbfb5-7cd7-3fad-9f99-c0fd4b670e05" locStartPos="18" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="232a0775-a6ea-32b2-8914-03a0dda5a6ee" locEndPos="19" locType="sr" urgent="true" hash="-725299517" locEndLn="34" goals="1," />
    <StdViol msg="Member function 'getSRV' returns handles to member data: '_mTextureSRV'" ln="42" locFile="/SimulationImproved/Texture.h" locStartln="42" sev="5" auth="DBate" locRef="21" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="1038881345" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="1038881345" unbViolId="7afd8edf-3db9-3d9e-94d7-7fcdf0fd949f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d4d4675-a9ec-3890-b823-39f0883ccc4c" locEndPos="3" locType="sr" urgent="true" hash="-725299517" locEndLn="42" goals="1," />
    <StdViol msg="Member function 'getSampler' returns handles to member data: '_mTextureSampler'" ln="47" locFile="/SimulationImproved/Texture.h" locStartln="47" sev="5" auth="DBate" locRef="21" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-1392412720" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1392412720" unbViolId="643bd4ce-e89e-3cb5-a3ee-28acd1f4ac3e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f64bfd6-4dce-3084-9699-d1d3fe810bcf" locEndPos="3" locType="sr" urgent="true" hash="-725299517" locEndLn="47" goals="1," />
    <StdViol msg="Do not overuse inheritance" ln="3" locFile="/SimulationImproved/Light.h" locStartln="3" sev="5" auth="DBate" locRef="22" rule="OOP-37" lnHash="139876989" rule.header="Prefer composition when don't need inheritance" tool="c++test" lineHash="139876989" unbViolId="4a477f4d-0172-3f05-b0dc-ac3429c1c6b2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92356547-4e95-3167-b2ad-29a5c26f250d" locEndPos="7" locType="sr" urgent="true" hash="380085998" locEndLn="3" goals="1," />
    <StdViol msg="Member function 'getColour' returns handles to member data: '_mColour'" ln="12" locFile="/SimulationImproved/Light.h" locStartln="12" sev="5" auth="DBate" locRef="22" rule="CODSTA-CPP-06-DOWNGRADED" lnHash="-861518255" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-861518255" unbViolId="af612cf0-25f5-3a50-a5cd-64ef8f1ecfa3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd2c941c-dd8d-38c4-ab4d-39f5c3c3aa5d" locEndPos="3" locType="sr" urgent="true" hash="380085998" locEndLn="12" goals="1," />
  </StdViols>

      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="34" total="27">
            <Project id="SimulationImproved" name="SimulationImproved" supp="34" total="27">
               <Res loc="/SimulationImproved/Camera.cpp" locRef="1" locType="sr" name="Camera.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Cube.cpp" locRef="2" locType="sr" name="Cube.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Cylinder.cpp" locRef="3" locType="sr" name="Cylinder.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/D3DFramework.cpp" locRef="4" locType="sr" name="D3DFramework.cpp" supp="17" total="0" />
               <Res loc="/SimulationImproved/GraphicalObject.cpp" locRef="5" locType="sr" name="GraphicalObject.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Light.cpp" locRef="6" locType="sr" name="Light.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Model.cpp" locRef="7" locType="sr" name="Model.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Rocket.cpp" locRef="8" locType="sr" name="Rocket.cpp" supp="0" total="4" />
               <Res loc="/SimulationImproved/Shader.cpp" locRef="9" locType="sr" name="Shader.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Simulation.cpp" locRef="10" locType="sr" name="Simulation.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Sphere.cpp" locRef="11" locType="sr" name="Sphere.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Texture.cpp" locRef="12" locType="sr" name="Texture.cpp" supp="0" total="0" />
               <Res loc="/SimulationImproved/Model.h" locRef="13" locType="sr" name="Model.h" supp="0" total="5" />
               <Res loc="/SimulationImproved/GraphicalObject.h" locRef="14" locType="sr" name="GraphicalObject.h" supp="0" total="2" />
               <Res loc="/SimulationImproved/Camera.h" locRef="15" locType="sr" name="Camera.h" supp="0" total="3" />
               <Res loc="/SimulationImproved/Sphere.h" locRef="16" locType="sr" name="Sphere.h" supp="0" total="0" />
               <Res loc="/SimulationImproved/Shader.h" locRef="17" locType="sr" name="Shader.h" supp="0" total="5" />
               <Res loc="/SimulationImproved/Cube.h" locRef="18" locType="sr" name="Cube.h" supp="0" total="0" />
               <Res loc="/SimulationImproved/D3DFramework.h" locRef="19" locType="sr" name="D3DFramework.h" supp="0" total="2" />
               <Res loc="/SimulationImproved/Resource.h" locRef="20" locType="sr" name="Resource.h" supp="17" total="0" />
               <Res loc="/SimulationImproved/Texture.h" locRef="21" locType="sr" name="Texture.h" supp="0" total="4" />
               <Res loc="/SimulationImproved/Light.h" locRef="22" locType="sr" name="Light.h" supp="0" total="2" />
               <Res loc="/SimulationImproved/Cylinder.h" locRef="23" locType="sr" name="Cylinder.h" supp="0" total="0" />
               <Res loc="/SimulationImproved/Rocket.h" locRef="24" locType="sr" name="Rocket.h" supp="0" total="0" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
